#!/usr/bin/env python
# Super simple script that listens to a local UDP port and relays all packets to an arbitrary remote host.
# Works with Python 2 and 3

import sys, socket, os, signal, errno, time

DEBUG=False

def fail(reason):
	sys.stderr.write(reason + '\n')
	sys.exit(1)

def writePidFile(pidFileName):
	if pidFileName == None:
		return

	try:
		f = open(pidFileName, "w")
		f.write(str(os.getpid()))
		f.close()
	except:
		fail('Could not write PID to ' + pidFileName)

def removePidFile(pidFileName):
	if pidFileName == None:
		return

	try:
		os.remove(pidFileName)
	except OSError, ex:
		if ex.errno != 2:
			sys.stderr.write("#%i Failed to remove PID file %s\n" % (int(ex.errno), pidFileName))

def signalTermHandler (signum, frame):
	global pidFile

	if pidFile != None:
		removePidFile(pidFile)

	sys.exit(0)

if len(sys.argv) != 2 or (len(sys.argv[1].split(':')) != 1 and len(sys.argv[1].split(':')) != 2):
	fail('Usage: udp-echo.py localPort[:pidfile]')

if len(sys.argv[1].split(':')) == 1:
	localPort = sys.argv[1].split(':')
	pidFile = None
else:
	localPort, pidFile = sys.argv[1].split(':')

if type(localPort) is list:
	localPort = localPort[0]

try:
	localPort = int(localPort)
except:
	fail('Invalid port number: ' + str(localPort))

try:
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.bind(('', localPort))
except:
	fail('Failed to bind on port ' + str(localPort))

if pidFile != None:
	writePidFile(pidFile)

if DEBUG:
	sys.stderr.write('All set.\n')

signal.signal(signal.SIGTERM, signalTermHandler)
signal.signal(signal.SIGINT , signalTermHandler) 

while True:
	try:
		data, addr = s.recvfrom(32768)
	except:
		if pidFile != None:
			removePidFile(pidFile)

		# Normal termination
		sys.exit(0)

	print("%s: '%s'" % (time.strftime("%Y-%m-%d %H:%M:%S"), data))
